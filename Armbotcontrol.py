# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Armbot.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#!/usr/bin/env python

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(458, 274)
        font = QtGui.QFont()
        font.setFamily("Cordia New")
        font.setPointSize(14)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("pythonProject1/Armbotweb-Flask/static/robot_4047.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setSizeGripEnabled(True)
        MainWindow.setModal(True)
        self.dateTime = QtWidgets.QDateTimeEdit(MainWindow)
        self.dateTime.setGeometry(QtCore.QRect(10, 10, 171, 22))
        self.dateTime.setObjectName("dateTime")
        self.commandLinkButton = QtWidgets.QCommandLinkButton(MainWindow)
        self.commandLinkButton.setGeometry(QtCore.QRect(10, 37, 211, 51))
        font = QtGui.QFont()
        font.setFamily("Cordia New")
        font.setPointSize(14)
        self.commandLinkButton.setFont(font)
        self.commandLinkButton.setMouseTracking(True)
        self.commandLinkButton.setObjectName("commandLinkButton")
        self.TextInput = QtWidgets.QPlainTextEdit(MainWindow)
        self.TextInput.setGeometry(QtCore.QRect(10, 160, 231, 71))
        self.TextInput.setObjectName("TextInput")
        self.ButtonAutoC = QtWidgets.QPushButton(MainWindow)
        self.ButtonAutoC.setGeometry(QtCore.QRect(280, 240, 93, 28))
        self.ButtonAutoC.setCheckable(True)
        self.ButtonAutoC.setAutoRepeat(True)
        self.ButtonAutoC.setAutoExclusive(True)
        self.ButtonAutoC.setObjectName("ButtonAutoC")
        self.ButtonReset = QtWidgets.QPushButton(MainWindow)
        self.ButtonReset.setGeometry(QtCore.QRect(200, 240, 61, 28))
        self.ButtonReset.setObjectName("ButtonReset")
        self.ButtonSentR = QtWidgets.QPushButton(MainWindow)
        self.ButtonSentR.setGeometry(QtCore.QRect(10, 240, 93, 28))
        self.ButtonSentR.setObjectName("ButtonSentR")
        self.ButtonStop = QtWidgets.QPushButton(MainWindow)
        self.ButtonStop.setGeometry(QtCore.QRect(390, 240, 61, 28))
        self.ButtonStop.setCheckable(True)
        self.ButtonStop.setObjectName("ButtonStop")
        self.NoteReport = QtWidgets.QLabel(MainWindow)
        self.NoteReport.setGeometry(QtCore.QRect(10, 140, 91, 16))
        self.NoteReport.setObjectName("NoteReport")
        self.LeftToRight = QtWidgets.QSlider(MainWindow)
        self.LeftToRight.setGeometry(QtCore.QRect(220, 70, 181, 22))
        self.LeftToRight.setOrientation(QtCore.Qt.Horizontal)
        self.LeftToRight.setObjectName("LeftToRight")
        self.SliderUpD = QtWidgets.QSlider(MainWindow)
        self.SliderUpD.setGeometry(QtCore.QRect(430, 70, 22, 161))
        self.SliderUpD.setOrientation(QtCore.Qt.Vertical)
        self.SliderUpD.setObjectName("SliderUpD")
        self.ButtonTouch = QtWidgets.QPushButton(MainWindow)
        self.ButtonTouch.setGeometry(QtCore.QRect(270, 170, 61, 61))
        self.ButtonTouch.setObjectName("ButtonTouch")
        self.ShowStatus = QtWidgets.QProgressBar(MainWindow)
        self.ShowStatus.setGeometry(QtCore.QRect(10, 110, 191, 23))
        self.ShowStatus.setProperty("value", 90)
        self.ShowStatus.setObjectName("ShowStatus")
        self.Status = QtWidgets.QLabel(MainWindow)
        self.Status.setGeometry(QtCore.QRect(10, 90, 64, 15))
        self.Status.setObjectName("Status")
        self.ProgramName = QtWidgets.QLabel(MainWindow)
        self.ProgramName.setGeometry(QtCore.QRect(230, 0, 201, 31))
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.ProgramName.setFont(font)
        self.ProgramName.setObjectName("ProgramName")
        self.lcdLR = QtWidgets.QLCDNumber(MainWindow)
        self.lcdLR.setGeometry(QtCore.QRect(230, 30, 71, 31))
        self.lcdLR.setObjectName("lcdLR")
        self.lcdUpD = QtWidgets.QLCDNumber(MainWindow)
        self.lcdUpD.setGeometry(QtCore.QRect(380, 30, 71, 31))
        self.lcdUpD.setObjectName("lcdUpD")
        self.LightToLeft = QtWidgets.QSlider(MainWindow)
        self.LightToLeft.setGeometry(QtCore.QRect(220, 140, 181, 22))
        self.LightToLeft.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.LightToLeft.setOrientation(QtCore.Qt.Horizontal)
        self.LightToLeft.setObjectName("LightToLeft")
        self.lcdRL = QtWidgets.QLCDNumber(MainWindow)
        self.lcdRL.setGeometry(QtCore.QRect(230, 100, 71, 31))
        self.lcdRL.setObjectName("lcdRL")
        self.ButtonSound = QtWidgets.QPushButton(MainWindow)
        self.ButtonSound.setGeometry(QtCore.QRect(350, 170, 61, 61))
        self.ButtonSound.setCheckable(True)
        self.ButtonSound.setObjectName("ButtonSound")
        self.ButtonCamera = QtWidgets.QPushButton(MainWindow)
        self.ButtonCamera.setGeometry(QtCore.QRect(120, 240, 61, 28))
        self.ButtonCamera.setObjectName("ButtonCamera")
        self.NoteReport.setBuddy(self.ButtonTouch)
        self.Status.setBuddy(self.SliderUpD)

        self.retranslateUi(MainWindow)
        self.TextInput.textChanged.connect(self.ButtonSentR.update) # type: ignore
        self.LeftToRight.valueChanged['int'].connect(self.ButtonAutoC.click) # type: ignore
        self.SliderUpD.valueChanged['int'].connect(self.ButtonAutoC.click) # type: ignore
        self.ButtonTouch.clicked['bool'].connect(self.ButtonAutoC.animateClick) # type: ignore
        self.ButtonAutoC.clicked.connect(self.ButtonReset.repaint) # type: ignore
        self.dateTime.dateTimeChanged['QDateTime'].connect(self.TextInput.show) # type: ignore
        self.SliderUpD.valueChanged['int'].connect(self.lcdUpD.display) # type: ignore
        self.LeftToRight.valueChanged['int'].connect(self.lcdLR.display) # type: ignore
        self.LightToLeft.valueChanged['int'].connect(self.lcdRL.display) # type: ignore
        self.ButtonStop.clicked.connect(self.ButtonStop.toggle) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.dateTime, self.commandLinkButton)
        MainWindow.setTabOrder(self.commandLinkButton, self.LeftToRight)
        MainWindow.setTabOrder(self.LeftToRight, self.SliderUpD)
        MainWindow.setTabOrder(self.SliderUpD, self.ButtonTouch)
        MainWindow.setTabOrder(self.ButtonTouch, self.ButtonAutoC)
        MainWindow.setTabOrder(self.ButtonAutoC, self.TextInput)
        MainWindow.setTabOrder(self.TextInput, self.ButtonSentR)
        MainWindow.setTabOrder(self.ButtonSentR, self.ButtonReset)
        MainWindow.setTabOrder(self.ButtonReset, self.ButtonStop)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Armbot Control System"))
        self.dateTime.setToolTip(_translate("MainWindow", "<html><head/><body><p>date-time arm bot working</p></body></html> "))
        self.commandLinkButton.setToolTip(_translate("MainWindow", "<html>\n"
"<head/>\n"
"<body>\n"
"<p>Admin Login</p>\n"
' <a href="http://127.0.0.1:5500/PythonProjects/pythonProject1/ArmbotWeb-Flask/templates/AdminLogin.html">Admin Login</a>\n'
"</body>\n"
"</html>"))
        self.commandLinkButton.setText(_translate("MainWindow", "Admin Login"))
        self.TextInput.setToolTip(_translate("MainWindow", "<html><head/><body><p>need to write all what\'s problem and how to problem solved</p></body></html>"))
        self.ButtonAutoC.setToolTip(_translate("MainWindow", "<html><head/><body><p>click no.1  for seting armbot to work.  </p><p>click no.2 for save all seting armbot to work and stark work for auto contorl.</p></body></html>"))
        self.ButtonAutoC.setText(_translate("MainWindow", "Auto contorl"))
        self.ButtonReset.setToolTip(_translate("MainWindow", "<html><head/><body><p>reset all for new setting Auto contorl Armbot</p></body></html>"))
        self.ButtonReset.setText(_translate("MainWindow", "Reset"))
        self.ButtonSentR.setToolTip(_translate("MainWindow", "<html><head/><body><p>click </p></body></html>"))
        self.ButtonSentR.setText(_translate("MainWindow", "Send report"))
        self.ButtonStop.setToolTip(_translate("MainWindow", "<html><head/><body><p>stop working</p></body></html>"))
        self.ButtonStop.setText(_translate("MainWindow", "Stop"))
        self.NoteReport.setText(_translate("MainWindow", "Note report"))
        self.LeftToRight.setToolTip(_translate("MainWindow", "<html><head/><body><p> contorl right</p></body></html>"))
        self.SliderUpD.setToolTip(_translate("MainWindow", "<html><head/><body><p>contorl up - down</p></body></html>"))
        self.ButtonTouch.setToolTip(_translate("MainWindow", "<html><head/><body><p>touch thing contorl</p></body></html>"))
        self.ButtonTouch.setText(_translate("MainWindow", "Touch"))
        self.ShowStatus.setToolTip(_translate("MainWindow", "<html><head/><body><p>status on Arm bot</p></body></html>"))
        self.Status.setText(_translate("MainWindow", "Status"))
        self.ProgramName.setText(_translate("MainWindow", "Armbot contorl"))
        self.lcdLR.setToolTip(_translate("MainWindow", "<html><head/><body><p>set value right</p></body></html>"))
        self.lcdUpD.setToolTip(_translate("MainWindow", "<html><head/><body><p>set value up</p></body></html>"))
        self.LightToLeft.setToolTip(_translate("MainWindow", "<html><head/><body><p>contorl left</p></body></html>"))
        self.lcdRL.setToolTip(_translate("MainWindow", "<html><head/><body><p>set value left</p></body></html>"))
        self.ButtonSound.setToolTip(_translate("MainWindow", "<html><head/><body><p>sound input contorl</p></body></html>"))
        self.ButtonSound.setText(_translate("MainWindow", "Sound"))
        self.ButtonCamera.setToolTip(_translate("MainWindow", "<html><head/><body><p>see camera working</p></body></html>"))
        self.ButtonCamera.setText(_translate("MainWindow", "Camera"))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QDialog()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
